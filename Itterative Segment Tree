
/*---------Range Query and Point Update--------*/

//min, max, sum

const int MX=200000;

int a[MX], T[MX];

void build(int n)
{
    for(int i=0; i<n; i++) T[i+n]=a[i];
    for(int i=n-1; i>0; i--) T[i]=min(T[i<<1], T[i<<1|1]);
}

void up(int n, int p, int vl)
{
    p+=n;
    for(T[p]=vl, p>>=1; p>0; p>>=1) T[p]=min(T[p<<1], T[p<<1|1]);
}

int RMQ(int n, int l, int r)
{
    r++;
    l+=n, r+=n;
    int x=1e9;
    for(; l<r; l>>=1, r>>=1)
    {
        if(l&1) x=min(x, T[l++]);
        if(r&1) x=min(x, T[--r]);
    }
    return mn;
}


/*------Range Update and Point Query------*/

// update type increment/decrement/xor


const int MX=200000;

int lazy[MX];

void up(int n, int l, int r, int vl)
{
    for(l+=n, r+=n, r++; l<r; l>>=1, r>>=1)
    {
        if(l&1) lazy[l++]+=vl;
        if(r&1) lazy[--r]+=vl;
    }
}

int Q(int n, int p)
{
    int s=0;
    for(p+=n; p>0; p>>=1) s+=lazy[p];
    return s;
}



